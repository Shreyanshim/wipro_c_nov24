/* 
float fArray[] = {2.2f, 4.4f, 1.5f, 9.1f, 6.75f};

print these:

fArray, fArray+1, fArray-1, fArray+2

*fArray, *fArray+1, *fArray + *fArray

&fArray, &fArray+1, &fArray-1, &fArray+2

*/

Pointer Arithmetic:
	
fArray->Address of 2.2f
fArray + 1-> Address of 4.4f
fArray-1->Invalid (Out of bound)
fArray + 2->Address of 1.5f

Dereferencing:
	
*fArray->2.2f
*fArray+1->3.2f
*fArray+ *fArray-> 4.4f

Address-of:

&fArray->Address of the entire array
&fArray+1->Address after the entire array
&fArray-1->Invalid (Out of Bounds)
&fArray+2->Address two arrays worth after fArray (invalid)

fArray, fArray+1, fArray-1, fArray+2
// All of these are addresses
 
 
*fArray, *fArray+1, *fArray + *fArray
// All of these are values
 
 
&fArray, &fArray+1, &fArray-1, &fArray+2
// All of these are addresses

* A 2D array is actually 1D array in memory/physically
* Name of an array is always address of the 1st element in the array.
* Thus, name of the array + 1 will be the address of 2nd element in the array. 
* When we apply * to name of the 1D array, then we get the value of 1st element of the array.
* When we apply & to the name of the array, it behaves like address of the whole array. 
Thus, &array+1 will give the address of next 1D array